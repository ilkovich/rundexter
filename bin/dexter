#!/usr/bin/env node
process.on('uncaughtException', function(err) {
  console.log('ERROR', err);
});
var rest = require('restler')
  , url = require('url')
  , fs   = require('fs')
  , prompt = require('prompt')
  , q    = require('q')
  , utils = require('../lib/utils')
  , configtools = require('../lib/config')
  , packagetools = require('../lib/package')
  , keytools = require('../lib/keys')
  , title, email, keyname
;

/**
 *  Defaults
 */
prompt.message = prompt.delimiter = '';

switch(process.argv[2]) {
    case 'create':
        if( !(title = process.argv[3]) )
            help('create');
        else
            create(title);
        break;
    case 'run': 
        run();
        break;
    case 'login':
        if( !(email = process.argv[3]) ) {
            help('login');
        } else {
            configtools.setBaseUrl(process.argv[4]);
            login(email, function() {
                var pubkey = keytools.getDefaultKey()
                    ;
                console.log('Welcome to Dexter!');
                if(pubkey) {
                    prompt.get({
                        name: 'yesno',
                        message: 'Add your public key for GIT access?',
                        validator: /y[es]*|n[o]?/,
                        warning: 'Must respond yes or no',
                        default: 'yes'
                    }, function(err, result) {
                        if(result.yesno.indexOf('y') === 0) {
                            addKey();
                        } else {
                            console.log('If you change your mind, you can always add it later');
                            help('add_key', false);
                        }
                    });
                }
            });
        }
        break;
    case 'add_key':
        if(count(process.argv) > 4) {
            //We might have [keyfile] [baseurl]
            configtools.setBaseUrl(process.argv[4]);
            addKey(process.argv[3]);
        } else if(count(process.argv) == 4) {
            if(process.argv[3].match(/^https?:\/\//i)) {
                //...or just [baseurl]
                configtools.setBaseUrl(process.argv[3]);
                addKey();
            } else {
                //...or just [keyfile]
                addKey(process.argv[3]);
            }
        } else {
            //...or nothing at all.
            addKey();
        }
        if( !(keypath = process.argv[3]) ) {
            helpAddKey();
        } else {
            configtools.setBaseUrl(process.argv[4]);
            addKey(keypath);
        }
    default: 
        help();
        return;
}

/**
 * Log the user in and update/create global config
 * 
 * @access public
 * @return void
 */
function login(email, callback) {
    var credentials = {
            email: email
        }
        ;

    prompt.get({
        properties: {
            password: {
                message: 'Password:',
                hidden: true
            }
        }
    }, function(err, result) {

        //Make sure the user entered something
        if(!(credentials.password = result.password))
            return helpLogin();

        configtools.getConfig(function(err, config) {
            var baseUrl = configtools.getBaseUrl(config)
                , loginUrl = url.resolve(baseUrl, 'auth/login')
                ;
                console.log(loginUrl);

            rest.post(loginUrl,  {
                data: credentials
            }).on('complete', function(result, response) {
                if(result && result.success) {
                    config.token   = result.data.token;
                    config.baseUrl = baseUrl;
                    configtools.writeConfig(config);
                    if(callback) callback();
                } else if(result && result.error) {
                    console.error(result.error);
                } else if(response && response.statusCode) {
                    console.error(response.statusCode, result);
                } else {
                    console.log(result.code);
                }
            });
        });
    });
}

/**
 * Add an SSH key to Dexter
 * 
 * @access public
 * @return void
 */
function addKey() {
}

/**
 * Create a new module
 * 
 * @param title $title 
 * @access public
 * @return void
 */
function create(title) {
    var name   = utils.slugify(title)
      , mkdirp = require('mkdirp')
      , ncp    = require('ncp').ncp
      , dest  
    ;

    mkdirp(( dest = './'+name ), function(err) {
        if(err) return console.error(err);


        ncp(__dirname + '/../skel/.', dest, function(err) {
            if(err) return console.error(err);

            process.chdir(dest);

            q.all([
                //needs to be read as a string so that we can preserve comments
                q.nfcall(utils.getStringFile, packagetools.getMetaFilename()),
                q.nfcall(utils.getJsonFile, packagetools.getPackageFilename())
            ]).then(function(results) {
                var meta = results[0]
                , package = results[1]
                ;

                //needs to be treated as a string so that we can preserve comments
                meta = meta.replace("%MYTITLE%", title);
                package.name = name;
                q.all([
                    q.nfcall(fs.writeFile, packagetools.getMetaFilename(), meta),
                    q.nfcall(fs.writeFile, packagetools.getPackageFilename(), JSON.stringify(package, null, 4)),
                ]).then(function(results) {
                    console.log('DONE');
                }, console.error);
            }, console.error).fail(console.error);
        });
    });
}

/**
 * Run a fixture against the current module. 
 * 
 * @access public
 * @return void
 */
function run() {
    var sf      = require('../StepFactory')
      , mod     = require(process.cwd())
      , fixtureName = process.argv[3] || 'default'
      , fixture  = require(process.cwd()+'/fixtures/'+fixtureName+'.js')
    ;

    var Runner = function() {
        var step = sf.create(mod);
        step.run(fixture);

        step.deferred.promise.then(function(out) {
            console.log(JSON.stringify(out,null,4));
        }, function(err) {
            console.error('fail', err);
        });
    };
    new Runner();
}

/*
 * HELPERS
 */

function help(command, showGeneral) {
    if(showGeneral !== false) showGeneral = true;
    if(showGeneral) {
        console.log('dexter <create|run|push|repository|add_key>');
        console.log('---------------------------------------');
    }
    var helptext = {
        'login': 'dexter login <email> Log into Dexter and get an API key'
        , 'add_key': 'dexter add_key <keyname>(optional) Add an SSH key to the system'
        , 'create': 'dexter create <moduleName> Create a skeleton for a new module'
        };
    if(helptext[command]) console.log(helptext[command]);
    else {
        Object.keys(helptext).forEach(function(key) {
            console.log(helptext[key]);
        });
    }
}
